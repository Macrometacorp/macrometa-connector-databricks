/*
 * This Scala source file was generated by the Gradle 'init' task.
 */
package com.macrometa.spark

import org.apache.spark.sql.SparkSession


object StreamTest extends App {

    val serviceUrl = "pulsar+ssl://api-support.eng.macrometa.io:6651"
    val authToken =  ""
    val topic = "persistent://edgar.garcia_macrometa.com/c8global._system/c8globals.CryptoTraderQuotesAvgUSD"
    val subscription = "test-subscription-123"

    val options = Map(
      "pulsarUrl" -> serviceUrl,
      "jwtToken" -> authToken,
      "topic" -> topic,
      "subscriptionName" -> subscription
    )


    val spark = SparkSession.builder().appName("MacrometaStreamingApp")
      .master("local[*]")
      .getOrCreate()

    val inputStream = spark.readStream
      .format("com.macrometa.spark.stream.MacrometaTableProvider")
      .options(options)
      .load()


    val topic_2 = "persistent://edgar.garcia_macrometa.com/c8global._system/c8globals.DataReceivedFromSpark"
    val subscription_2 = "test-subscription-10"
    val options_2 = Map(
      "pulsarUrl" -> serviceUrl,
      "jwtToken" -> authToken,
      "topic" -> topic_2,
      "subscriptionName" -> subscription_2,
      "checkpointLocation" -> "checkpoint"
    )

    val query = inputStream.select("symbol","ma").withColumnRenamed("ma", "value").writeStream
      .format("com.macrometa.spark.stream.MacrometaTableProvider")
      .options(options_2) // Set to "false" to avoid truncating output if the columns are too wide
      .start()



    query.awaitTermination()
  query.stop()

}
