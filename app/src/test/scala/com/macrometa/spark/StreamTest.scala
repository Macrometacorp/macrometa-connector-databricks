/*
 * This Scala source file was generated by the Gradle 'init' task.
 */
package com.macrometa.spark

import org.apache.spark.sql.SparkSession


object StreamTest extends App {

  val federation = "support.eng.macrometa.io"
  val port = "6651"
  val fabric = "_system"
  val tenant = "edgar.garcia_macrometa.com"
  val replication = "global"
  val sourceStream = "CryptoTraderQuotesAvgUSD"
  val authToken =  ""
  val sourceSubscription = "test-subscription-123"

  val sourceOptions = Map(
    "federation" -> federation,
    "jwtToken" -> authToken,
    "fabric" -> fabric,
    "tenant" -> tenant,
    "replication" -> replication,
    "stream" -> sourceStream,
    "subscriptionName" -> sourceSubscription
  )


  val spark = SparkSession.builder().appName("MacrometaStreamingApp")
    .master("local[*]")
    .getOrCreate()

  val inputStream = spark.readStream
    .format("com.macrometa.spark.stream.MacrometaTableProvider")
    .options(sourceOptions)
    .load()


  val targetSubscription = "test-subscription-10"
  val targetStream = "DataReceivedFromSpark"
  val targetOptions = Map(
    "federation" -> federation,
    "port" -> port,
    "jwtToken" -> authToken,
    "fabric" -> fabric,
    "tenant" -> tenant,
    "replication" -> replication,
    "stream" -> targetStream,
    "subscriptionName" -> targetSubscription,
    "checkpointLocation" -> "checkpoint"
  )

  val query = inputStream.select("symbol","ma").withColumnRenamed("ma", "value").writeStream
    .format("com.macrometa.spark.stream.MacrometaTableProvider")
    .options(targetOptions)
    .start()



  query.awaitTermination()
  query.stop()

}
